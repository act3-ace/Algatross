#!/usr/bin/env python3

import pkgutil
import re

from pathlib import Path

from jinja2.nativetypes import NativeEnvironment

ignore_modules_pattern = re.compile(r"^.*test_(mem|det)_experiment")

AUTOGEN_COMMENT = r""".. auto generated by {{ genfile }}
"""

INDEX_TEMPLATE = (
    AUTOGEN_COMMENT
    + r"""
.. _mo-marl-api:

MO-MARL API Documentation
=========================

{%- if modules %}
{%- set api_prefix = "algatross." %}
{%- set api_prefix_len = (":mod:~" + api_prefix)|length + 2 %}
{% for module in modules %}
{%- if module.modules %}
:mod:`~{{ api_prefix + module.source }}`
{{ "-" * ((module.source|length) + api_prefix_len) }}

.. autoapisummary::
{% for sub_module in module.modules %}
   algatross.{{ sub_module.source }}
{%- endfor %}
{%- endif %}
{% endfor %}
{%- endif %}
"""
)


def get_module_children(module_name):
    """Get a list of submodules and their names within a given module."""
    module = __import__(module_name)
    if not hasattr(module, "__path__"):
        return []  # Not a package

    _module_root, *sub_path = module_name.split(".")
    module_path = Path(module.__path__[0])
    for sub_module_path in sub_path:
        module_path /= sub_module_path
    children = []
    for _loader, name, _is_pkg in pkgutil.walk_packages([str(module_path)]):
        full_name = module_name + "." + name
        try:
            child_module = __import__(full_name)
            children.append((full_name, child_module))
        except ImportError:
            pass  # Ignore import errors

    return children


def main():
    jinja_env = NativeEnvironment()
    algatross_members = get_module_children("algatross")
    filepath = Path(__file__).relative_to(Path().cwd())
    output_dir = Path(__file__).parent / "docs"
    if not output_dir.exists():
        output_dir.mkdir(parents=True)
    module_listing = []
    for module_name, _ in algatross_members:
        _module_base, *module_suffix = module_name.split(".")
        module_children = get_module_children(module_name)
        child_modules = []
        for child_module_name, _ in module_children:
            child_module_base, *child_module_suffix = child_module_name.split(".")
            if not ignore_modules_pattern.match(child_module_name):
                child_modules.append({
                    "name": child_module_name,
                    "source": ".".join(child_module_suffix),
                    "path": "/".join([child_module_base, *child_module_suffix]),
                })
        module_listing.append({"name": module_name, "source": ".".join(module_suffix), "modules": child_modules})

    index_file = output_dir / "index.rst"
    tmpl = jinja_env.from_string(INDEX_TEMPLATE)
    output = tmpl.render(modules=module_listing, genfile=filepath)
    with index_file.open("w", encoding="utf-8") as f:
        f.write(output)


if __name__ == "__main__":
    main()
